$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from "@iosevka/util"


glyph-module

glyph-block Letter-Latin-Lower-AE-OE : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Adjustment : LeaningAnchor
	glyph-block-import Letter-Shared : CreateTurnedLetter
	glyph-block-import Letter-Shared-Shapes : nShoulder OBarLeft
	glyph-block-import Letter-Latin-Lower-M : MEnoughSpaceForFullSerifs dfM

	glyph-block-export SubDfAndShift
	define [SubDfAndShift pShift df _o] : begin
		local subDf : df.slice 3 2 _o
		local subDfFullShift : df.rightSB - subDf.rightSB
		local shift : pShift * subDfFullShift
		return { subDf shift }

	glyph-block-export SubDfAndShiftEx
	define [SubDfAndShiftEx p q pShift df _o] : begin
		local subDf : df.slice p q _o
		local subDfFullShift : df.rightSB - subDf.rightSB
		local shift : pShift * subDfFullShift
		return { subDf shift }

	do "a subglyphs"
		define [AAShape body hookStyle pShift df o] : begin
			local { subDf shift } : SubDfAndShift pShift df o
			return : with-transform [ApparentTranslate shift 0] [body subDf hookStyle df.mvs]

		glyph-block-import Letter-Latin-Lower-A : DoubleStorey
		define DoubleStoreyConfig : object
			doubleStoreySerifless                         { DoubleStorey.Serifless         1 }
			doubleStoreySerifed                           { DoubleStorey.Serifed           1 }
			doubleStoreyTailed                            { DoubleStorey.Tailed            1 }
			doubleStoreyToothlessCorner                   { DoubleStorey.ToothlessCorner   1 }
			doubleStoreyToothlessRounded                  { DoubleStorey.ToothlessRounded  1 }
			doubleStoreyHookInwardSerifedSerifless        { DoubleStorey.Serifless         2 }
			doubleStoreyHookInwardSerifedSerifed          { DoubleStorey.Serifed           2 }
			doubleStoreyHookInwardSerifedTailed           { DoubleStorey.Tailed            2 }
			doubleStoreyHookInwardSerifedToothlessCorner  { DoubleStorey.ToothlessCorner   2 }
			doubleStoreyHookInwardSerifedToothlessRounded { DoubleStorey.ToothlessRounded  2 }

		foreach { suffix { bodyR hookStyle } } [Object.entries DoubleStoreyConfig] : do

			create-glyph "ae/a.\(suffix)" : glyph-proc
				local df : include : DivFrame para.diversityM 3
				include : df.markSet.e
				set-base-anchor 'cvDecompose' 0 0
				include : AAShape DoubleStorey.ToothlessRounded hookStyle 0 df 0

			create-glyph "aa.\(suffix)" : glyph-proc
				local df : include : DivFrame para.diversityM 3
				include : df.markSet.e

				local [left]  : AAShape DoubleStorey.ToothlessRounded hookStyle 0 df
				local [right] : AAShape bodyR                         hookStyle 1 df
				include : difference [right] : intersection
					MaskAbove (XH * OverlayPos * 1.02)
					union
						with-transform [ApparentTranslate (-0.25 * df.mvs) 0] [left]
						with-transform [ApparentTranslate (-0.50 * df.mvs) 0] [left]
						with-transform [ApparentTranslate (-0.75 * df.mvs) 0] [left]
						with-transform [ApparentTranslate (-1.00 * df.mvs) 0] [left]

				include : difference [left] : intersection
					MaskBelow (XH * OverlayPos * 1.02)
					union
						with-transform [ApparentTranslate (+0.25 * df.mvs) 0] [right]
						with-transform [ApparentTranslate (+0.50 * df.mvs) 0] [right]
						with-transform [ApparentTranslate (+0.75 * df.mvs) 0] [right]
						with-transform [ApparentTranslate (+1.00 * df.mvs) 0] [right]

	do "o subglyphs"
		define [oeOPart pShift df top ad] : begin
			local { subDf shift } : SubDfAndShift pShift df OX
			return : with-transform [ApparentTranslate shift 0]
				OShape top 0 subDf.leftSB subDf.rightSB df.mvs
					subDf.archDepthA ad
					subDf.archDepthB ad

		create-glyph 'oe/o' : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.e
			set-base-anchor 'cvDecompose' 0 0
			include : oeOPart 0 df XH SmallArchDepth

		create-glyph 'ao/o' : glyph-proc
			local df : include : DivFrame para.diversityM 3
			set-mark-anchor 'cvDecompose' 0 0
			include : oeOPart 1 df XH SmallArchDepth

		create-glyph 'OO/left' : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.capital
			set-base-anchor 'cvDecompose' 0 0
			include : oeOPart 0 df CAP ArchDepth

		create-glyph 'OO/right' : glyph-proc
			local df : include : DivFrame para.diversityM 3
			set-mark-anchor 'cvDecompose' 0 0
			include : oeOPart 1 df CAP ArchDepth

	do "e subglyphs"
		glyph-block-import Letter-Latin-Lower-E : SmallEShape SmallERoundedShape RevSmallEShape RevSmallERoundedShape

		define [EShape pShift df body] : begin
			local { subDf shift } : SubDfAndShift pShift df OX
			return : with-transform [ApparentTranslate shift 0] [body subDf XH df.mvs]

		define [InvEShape pShift df revbody] : begin
			local { subDf shift } : SubDfAndShift pShift df OX
			return : with-transform [ApparentTranslate shift 0]
				with-transform [FlipAround subDf.middle (XH / 2)] [revbody subDf XH df.mvs]

		define Config : object
			flatCrossbar { SmallEShape        RevSmallEShape        }
			rounded      { SmallERoundedShape RevSmallERoundedShape }

		foreach { suffix { body revbody } } [Object.entries Config] : do
			create-glyph "ae/e.\(suffix)" : glyph-proc
				local df : DivFrame para.diversityM 3
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : EShape 1 df body

			create-glyph "aeInvE/right.\(suffix)" : glyph-proc
				local df : DivFrame para.diversityM 3
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : InvEShape 1 df revbody

	do "u subglyphs"
		glyph-block-import Letter-Latin-U : UShapeGroup SmallUConfigT

		define df : DivFrame para.diversityM 3
		define { subDf shift } : SubDfAndShift 1 df 0
		local ada : subDf.archDepthA SmallArchDepth df.mvs
		local adb : subDf.archDepthB SmallArchDepth df.mvs
		define sg : UShapeGroup ada adb

		foreach { suffix { Base Slabs } } [Object.entries : SmallUConfigT sg] : do
			create-glyph "ue/u.\(suffix)" : glyph-proc
				include df
				include : df.markSet.e
				set-base-anchor 'cvDecompose' 0 0
				include : Base subDf XH df.mvs
				include : Slabs subDf XH

				eject-contour 'strokeR'
				eject-contour 'serifRT'
				eject-contour 'serifRB'

			create-glyph "au/u.\(suffix)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : difference
					Base subDf XH df.mvs
					intersection [MaskLeft subDf.middle] [MaskAbove (XH - adb)]
				include : Slabs subDf XH
				include : ApparentTranslate shift 0
				eject-contour 'serifLT'

	do "c subglyphs"
		glyph-block-import Letter-Latin-C : CLetterForm CConfig

		define [openOShape df sty styBot] : new-glyph : glyph-proc
			local { subDf } : SubDfAndShift 0 df OX
			local ada : subDf.archDepthA SmallArchDepth df.mvs
			local adb : subDf.archDepthB SmallArchDepth df.mvs

			local lf : CLetterForm subDf sty styBot XH 0
				ada -- [subDf.archDepthA SmallArchDepth df.mvs]
				adb -- [subDf.archDepthB SmallArchDepth df.mvs]
				sw  -- df.mvs
			include : lf.full
			include : FlipAround (subDf.width / 2) (XH / 2)

		define FLAT-CONNECTION 3
		define [EsTeLeftShape subDf styBot] : new-glyph : glyph-proc
			local ada : subDf.archDepthA SmallArchDepth subDf.mvs
			local adb : subDf.archDepthB SmallArchDepth subDf.mvs

			local lf : CLetterForm subDf FLAT-CONNECTION styBot XH 0
				ada -- [subDf.archDepthA SmallArchDepth subDf.mvs]
				adb -- [subDf.archDepthB SmallArchDepth subDf.mvs]
				sw  -- subDf.mvs
			include : lf.full

		foreach { suffix { sty styBot } } [Object.entries CConfig] : do
			create-glyph "oeOpenO/left.\(suffix)" : glyph-proc
				local df : include : DivFrame para.diversityM 3
				include : df.markSet.e
				set-base-anchor 'cvDecompose' 0 0
				include : openOShape df sty styBot

	do "X subglyphs"
		glyph-block-import Letter-Shared-Shapes : SerifFrame WithSerifOverflowMask
		glyph-block-import Letter-Latin-X : XConfig XLetterForm XSerifs

		foreach { suffix {stroke1 stroke2 serifShape fMaskBase} } [Object.entries XConfig] : do
			define [halfLetterShape df top bot turn tension] : glyph-proc
				local lf : XLetterForm df top bot stroke1 stroke2 turn tension
				include : WithSerifOverflowMask fMaskBase top bot df.leftSB df.rightSB : lf.rightHalf fMaskBase
				if serifShape : begin
					local sf : SerifFrame.fromDf df top bot
					include : match serifShape
						[Just XSerifs.Full] : composite-proc sf.rt.full sf.rb.full
						[Just XSerifs.SemiChancery] : composite-proc sf.rt.full
						[Just XSerifs.BilateralMotion] : composite-proc sf.rb.outer
						__ : glyph-proc

			define [LhaRightLetterShape df top bot turn tension] : glyph-proc
				local stroke1f : if (stroke1 == 3) 4 stroke1
				local lf : XLetterForm df top bot stroke1f stroke2 turn tension
					sw -- df.mvs
					swCursiveEnd   -- [AdviceStroke 3 df.div]
					swCursiveCoEnd -- df.mvs
					swCursiveMid   -- df.mvs
				include : WithSerifOverflowMask fMaskBase top bot df.leftSB df.rightSB : lf.base fMaskBase
				if serifShape : begin
					local sf : SerifFrame.fromDf df top bot
					include : match serifShape
						[Just XSerifs.Full] : composite-proc sf.rt.full sf.lb.full sf.rb.full
						[Just XSerifs.SemiChancery] : composite-proc sf.rt.full sf.lb.full
						[Just XSerifs.BilateralMotion] : composite-proc sf.rb.outer
						__ : glyph-proc

	do "subglyph diacritics"
		glyph-block-import Mark-Overlay : InnerDot

		create-glyph "rightHalfSlashOverlay" : glyph-proc
			local fine : 0.375 * OverlayStroke
			local { subDf shift } : SubDfAndShift 1 [DivFrame para.diversityM 3] OX
			include : dispiro
				flat (shift + subDf.leftSB + OX + fine) [mix XH 0 1.05] [widths.center : 2 * fine]
				curl (shift + subDf.rightSB - OX - fine) [mix 0 XH 1.05]

		create-glyph "rightHalfBarOverlay" : glyph-proc
			local { subDf shift } : SubDfAndShift 1 [DivFrame para.diversityM 3] OX
			include : HBar.m (shift + subDf.leftSB + OX + 1) (shift + subDf.rightSB - OX - 1) (XH * 0.5) OverlayStroke

		define [OODots df kHeight fRound kdr] : glyph-proc
			local { subDf shift } : SubDfAndShift 0 df OX
			local space : InnerDot.spaceOfDf subDf
			local kHeight2 : [Math.sqrt ([InnerDot.spaceOfDf : DivFrame 1] / space)] * kHeight
			local offset : 0.5 * (space + [HSwToV df.mvs])
			include : InnerDot (-offset) 0 kHeight2 fRound kdr space 3
			include : InnerDot   offset  0 kHeight2 fRound kdr space 3

		foreach { suffix { DrawAt kdr } } [Object.entries DotVariants] : do
			create-glyph "OODots.\(suffix)" : glyph-proc
				set-width 0
				set-mark-anchor 'slash' 0 0 0 0
				local df : DivFrame para.diversityM 3
				include : OODots df 2 (DrawAt === DotAt) kdr
			create-glyph "ooDots.\(suffix)" : glyph-proc
				set-width 0
				set-mark-anchor 'slash' 0 0 0 0
				local df : DivFrame para.diversityM 3
				include : OODots df 1.5 (DrawAt === DotAt) kdr

	select-variant "aa" 0xA733 (follow -- 'a/turnABase')

	select-variant "ae/a"
	select-variant "ae/e" (follow -- 'e')
	select-variant "aeInvE/right" (follow -- 'e')
	select-variant "ue/u"
	select-variant "au/u" (follow -- [conditional-follow [MEnoughSpaceForFullSerifs : dfM] 'au/u/full' 'au/u/reduced'])
	select-variant "oeOpenO/left" (follow -- 'c')

	derive-composites 'ae' 0xE6   'ae/a' 'ae/e'
	derive-composites 'oe' 0x153  'oe/o' 'ae/e'
	derive-composites 'ue' 0x1D6B 'ue/u' 'ae/e'
	derive-composites 'ao' 0xA735 'ae/a' 'ao/o'
	derive-composites 'au' 0xA737 'ae/a' 'au/u'
	derive-composites 'oo' 0xA74F 'oe/o' 'ao/o'
	derive-composites 'uo' 0xAB63 'ue/u' 'ao/o'
	derive-composites 'oeOpenO' 0xAB62 'oeOpenO/left' 'ae/e'
	derive-composites 'aeInvE'  0xAB31 'ae/a' 'aeInvE/right'
	derive-composites 'oeInv'   0xAB40 'oe/o' 'aeInvE/right'

	CreateTurnedLetter 'turnae' 0x1D02 'ae' HalfAdvance (XH / 2) [DivFrame para.diversityM 3]
	CreateTurnedLetter 'turnoe' 0x1D14 'oe' HalfAdvance (XH / 2) [DivFrame para.diversityM 3]

	derive-composites 'turnoeSlashO' 0xAB41 'turnoe' 'rightHalfSlashOverlay'
	derive-composites 'turnoeBarO' 0xAB42 'turnoe' 'rightHalfBarOverlay'

	derive-composites 'OO' 0xA74E 'OO/left' 'OO/right'

	select-variant 'OODots' (follow -- 'diacriticDot')
	select-variant 'ooDots' (follow -- 'diacriticDot')

	glyph-block-export BuildRha
	define [BuildRha srcs] : glyph-proc
		local df : include : DivFrame para.diversityM 3
		include : df.markSet.p

		local {ra ha} srcs
		include : union
			refer-glyph ra
			difference
				refer-glyph ha
				with-transform [ApparentTranslate (-0.25 * df.mvs) 0] [refer-glyph ra]
				with-transform [ApparentTranslate (-0.50 * df.mvs) 0] [refer-glyph ra]
				with-transform [ApparentTranslate (-0.75 * df.mvs) 0] [refer-glyph ra]
				with-transform [ApparentTranslate (-1.00 * df.mvs) 0] [refer-glyph ra]
